// Generated by view binder compiler. Do not edit!
package com.example.SecondHandGame.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.SecondHandGame.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PostListRowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView postlistrowAvatarImg;

  @NonNull
  public final CheckBox postlistrowCb;

  @NonNull
  public final TextView postlistrowIdTv;

  @NonNull
  public final TextView postlistrowNameTv;

  private PostListRowBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView postlistrowAvatarImg, @NonNull CheckBox postlistrowCb,
      @NonNull TextView postlistrowIdTv, @NonNull TextView postlistrowNameTv) {
    this.rootView = rootView;
    this.postlistrowAvatarImg = postlistrowAvatarImg;
    this.postlistrowCb = postlistrowCb;
    this.postlistrowIdTv = postlistrowIdTv;
    this.postlistrowNameTv = postlistrowNameTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PostListRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PostListRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.post_list_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PostListRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.postlistrow_avatar_img;
      ImageView postlistrowAvatarImg = ViewBindings.findChildViewById(rootView, id);
      if (postlistrowAvatarImg == null) {
        break missingId;
      }

      id = R.id.postlistrow_cb;
      CheckBox postlistrowCb = ViewBindings.findChildViewById(rootView, id);
      if (postlistrowCb == null) {
        break missingId;
      }

      id = R.id.postlistrow_id_tv;
      TextView postlistrowIdTv = ViewBindings.findChildViewById(rootView, id);
      if (postlistrowIdTv == null) {
        break missingId;
      }

      id = R.id.postlistrow_name_tv;
      TextView postlistrowNameTv = ViewBindings.findChildViewById(rootView, id);
      if (postlistrowNameTv == null) {
        break missingId;
      }

      return new PostListRowBinding((ConstraintLayout) rootView, postlistrowAvatarImg,
          postlistrowCb, postlistrowIdTv, postlistrowNameTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
